apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
  app: vote
 name: scenario-vote
spec:
 strategy:
  rollingUpdate:
   maxSurge: 2
   maxUnavailable: 2
 replicas: 3
 selector:
  matchLabels:
   app: vote
 template:
  metadata:
   labels:
    app: vote
  spec:
   containers:
    - name: voteapp
      image: dockersamples/examplevotingapp_vote:after
      imagePullPolicy: IfNotPresent
      ports:
       - name: vote 
         containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
 labels:
  app: vote
 name: scenario-vote
spec:
 type: NodePort
 selector:
  app: vote
 ports:
  - port: 5000
    targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
  app: redis
 name: scenario-redis
spec:
 replicas: 1
 selector:
  matchLabels:
   app: redis
 template:
  metadata:
   labels:
    app: redis
  spec:
   containers: 
    - name: redis
      image: redis:alpine
      imagePullPolicy: IfNotPresent
      ports:
       - name: redis 
         containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
 labels:
  app: redis
 name: scenario-redis
spec:
 type: ClusterIP
 selector:
  app: redis
 ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
  app: worker
 name: scenario-worker
spec: 
 replicas: 2
 selector: 
  matchLabels:
   app: worker
 template:
  metadata:
   labels: 
    app: worker
  spec:
   containers:
    - name: worker
      image: dockersamples/examplevotingapp_worker
      imagePullPolicy: IfNotPresent
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
  app: db
 name: scenario-db
spec:
 replicas: 1
 selector:
  matchLabels:
   app: db
 template:
  metadata:
   labels:
    app: db
  spec:
   containers:
    - name: postgres
      image: postgres:9.4
      imagePullPolicy: IfNotPresent
      ports:
       - name: postgres
         containerPort: 5432
      env:
       - name: PGDATA
         value: /var/lib/postgresql/data/pgdata
       - name: POSTGRES_USER
         value: postgres
       - name: POSTGRES_PASSWORD
         value: postgres
---
apiVersion: v1
kind: Service
metadata:
 labels:
  app: db
 name: scenario-db
spec:
 type: ClusterIP
 selector:
  app: db
 ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
  app: result
 name: scenario-result
spec:
 strategy:
  rollingUpdate:
   maxSurge: 1
   maxUnavailable: 1
 replicas: 3 
 selector: 
  matchLabels:
   app: result
 template:
  metadata:
   labels:
    app: result
  spec:
   containers: 
    - name: resultapp
      image: dockersamples/examplevotingapp_result:after
      imagePullPolicy: IfNotPresent
      ports:
       - name: result 
         containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
 labels: 
  app: result
 name: scenario-result
spec:
 type: NodePort
 selector:
  app: result
 ports: 
  - port: 5001
    targetPort: 80

